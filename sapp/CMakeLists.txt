# select the 3D backend for sokol_gfx.h and sokol_app.h
add_definitions(-D${sokol_backend})

fips_ide_group(Samples)
fips_begin_app(basisu-sapp windowed)
    fips_files(basisu-sapp.c)
    fips_deps(sokol basisu)
    fips_dir(data)
    fipsutil_embed(basisu-assets.yml basisu-assets.h)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(basisu-sapp-ui windowed)
    fips_files(basisu-sapp.c)
    fips_deps(sokol basisu dbgui)
    fips_dir(data)
    fipsutil_embed(basisu-assets.yml basisu-assets.h)
    target_compile_definitions(basisu-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

# on emscripten, build a second pixelformats simple which enforces WebGL
if (FIPS_EMSCRIPTEN)
fips_ide_group(Samples)
fips_begin_app(pixelformats-gles2-sapp windowed)
    fips_files(pixelformats-sapp.c)
    sokol_shader(pixelformats-sapp.glsl ${slang})
    fips_deps(sokol cimgui)
    target_compile_definitions(pixelformats-gles2-sapp PRIVATE USE_GLES2)
fips_end_app()
endif()

fips_ide_group(Samples)
fips_begin_app(sgl-microui-sapp windowed)
    fips_files(sgl-microui-sapp.c)
    fips_deps(sokol microui)
fips_end_app()
# NOTE: this uses cimgui
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(sgl-microui-sapp-ui windowed)
    fips_files(sgl-microui-sapp.c)
    fips_deps(sokol cdbgui cimgui microui)
    target_compile_definitions(sgl-microui-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(nuklear-sapp windowed)
    fips_files(nuklear-sapp.c)
    fips_deps(sokol nuklear)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(nuklear-sapp-ui windowed)
    fips_files(nuklear-sapp.c)
    fips_deps(sokol nuklear dbgui)
    target_compile_definitions(nuklear-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(nuklear-images-sapp windowed)
    fips_files(nuklear-images-sapp.c)
    fips_deps(sokol nuklear)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(nuklear-images-sapp-ui windowed)
    fips_files(nuklear-images-sapp.c)
    fips_deps(sokol nuklear dbgui)
    target_compile_definitions(nuklear-images-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(fontstash-sapp windowed)
    fips_files(fontstash-sapp.c)
    fips_deps(sokol fileutil)
    fips_dir(data)
    fipsutil_copy(fontstash.yml)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(fontstash-sapp-ui windowed)
    fips_files(fontstash-sapp.c)
    fips_deps(sokol fileutil dbgui)
    fips_dir(data)
    fipsutil_copy(fontstash.yml)
    target_compile_definitions(fontstash-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(fontstash-layers-sapp windowed)
    fips_files(fontstash-layers-sapp.c)
    fips_deps(sokol fileutil)
    sokol_shader(fontstash-layers-sapp.glsl ${slang})
    fips_dir(data)
    fipsutil_copy(fontstash.yml)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(fontstash-layers-sapp-ui windowed)
    fips_files(fontstash-layers-sapp.c)
    fips_deps(sokol fileutil dbgui)
    sokol_shader(fontstash-layers-sapp.glsl ${slang})
    fips_dir(data)
    fipsutil_copy(fontstash.yml)
    target_compile_definitions(fontstash-layers-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(modplay-sapp windowed)
    fips_files(modplay-sapp.c)
    if (FIPS_IOS)
        fips_files(ios-info.plist)
    endif()
    fips_dir(data)
    fipsutil_embed(mods.yml mods.h)
    fips_deps(sokol libmodplug)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(restart-sapp windowed)
    fips_files(restart-sapp.c)
    sokol_shader(restart-sapp.glsl ${slang})
    fips_dir(data)
    fipsutil_copy(restart-assets.yml)
    fips_deps(sokol fileutil stb libmodplug)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(plmpeg-sapp windowed)
    fips_files(plmpeg-sapp.c)
    sokol_shader(plmpeg-sapp.glsl ${slang})
    fips_dir(data)
    fipsutil_copy(plmpeg-assets.yml)
    fips_deps(sokol fileutil)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(plmpeg-sapp-ui windowed)
    fips_files(plmpeg-sapp.c)
    sokol_shader(plmpeg-sapp.glsl ${slang})
    fips_dir(data)
    fipsutil_copy(plmpeg-assets.yml)
    fips_deps(sokol fileutil dbgui)
    target_compile_definitions(plmpeg-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(cgltf-sapp windowed)
    fips_files(cgltf-sapp.c)
    sokol_shader(cgltf-sapp.glsl ${slang})
    fips_dir(data)
    fipsutil_copy(cgltf-assets.yml)
    fips_deps(sokol basisu fileutil)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(cgltf-sapp-ui windowed)
    fips_files(cgltf-sapp.c)
    sokol_shader(cgltf-sapp.glsl ${slang})
    fips_dir(data)
    fipsutil_copy(cgltf-assets.yml)
    fips_deps(sokol dbgui basisu fileutil)
    target_compile_definitions(cgltf-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(loadpng-sapp windowed)
    fips_files(loadpng-sapp.c)
    sokol_shader(loadpng-sapp.glsl ${slang})
    fips_dir(data)
    fipsutil_copy(loadpng-assets.yml)
    fips_deps(sokol stb fileutil)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(loadpng-sapp-ui windowed)
    fips_files(loadpng-sapp.c)
    sokol_shader(loadpng-sapp.glsl ${slang})
    fips_dir(data)
    fipsutil_copy(loadpng-assets.yml)
    fips_deps(sokol dbgui stb fileutil)
    target_compile_definitions(loadpng-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(spine-simple-sapp windowed)
    fips_files(spine-simple-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(spine-simple-sapp-ui windowed)
    fips_files(spine-simple-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil dbgui)
    target_compile_definitions(spine-simple-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(spine-inspector-sapp windowed)
    fips_files(spine-inspector-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil cimgui)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(spine-skinsets-sapp windowed)
    fips_files(spine-skinsets-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(spine-skinsets-sapp-ui windowed)
    fips_files(spine-skinsets-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil dbgui)
    target_compile_definitions(spine-skinsets-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(spine-layers-sapp windowed)
    fips_files(spine-layers-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(spine-layers-sapp-ui windowed)
    fips_files(spine-layers-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil dbgui)
    target_compile_definitions(spine-layers-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(spine-contexts-sapp windowed)
    fips_files(spine-contexts-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(spine-contexts-sapp-ui windowed)
    fips_files(spine-contexts-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil dbgui)
    target_compile_definitions(spine-contexts-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(spine-switch-skinsets-sapp windowed)
    fips_files(spine-switch-skinsets-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil)
fips_end_app()
fips_ide_group(SamplesWithDebugUI)
fips_begin_app(spine-switch-skinsets-sapp-ui windowed)
    fips_files(spine-switch-skinsets-sapp.c)
    fips_dir(data)
    fipsutil_copy(spine-assets.yml)
    fips_deps(sokol spine-c stb fileutil dbgui)
    target_compile_definitions(spine-switch-skinsets-sapp-ui PRIVATE USE_DBG_UI)
fips_end_app()

fips_ide_group(Samples)
fips_begin_app(ozz-anim-sapp windowed)
    fips_files(ozz-anim-sapp.cc)
    fips_dir(data)
    fipsutil_copy(ozz-anim-assets.yml)
    fips_deps(sokol fileutil ozzanim imgui)
fips_end_app()
fips_begin_app(ozz-skin-sapp windowed)
    fips_files(ozz-skin-sapp.cc)
    sokol_shader(ozz-skin-sapp.glsl ${slang})
    fips_dir(data)
    fipsutil_copy(ozz-skin-assets.yml)
    fips_deps(sokol fileutil ozzanim imgui)
fips_end_app()
fips_begin_app(shdfeatures-sapp windowed)
    fips_files(shdfeatures-sapp.c)
    sokol_shader_variant_with_reflection(shdfeatures-sapp.glsl ${slang} "none" "NONE")
    sokol_shader_variant_with_reflection(shdfeatures-sapp.glsl ${slang} "slm" "SKINNING:LIGHTING:MATERIAL")
    sokol_shader_variant_with_reflection(shdfeatures-sapp.glsl ${slang} "sl"  "SKINNING:LIGHTING")
    sokol_shader_variant_with_reflection(shdfeatures-sapp.glsl ${slang} "s"   "SKINNING")
    sokol_shader_variant_with_reflection(shdfeatures-sapp.glsl ${slang} "sm"  "SKINNING:MATERIAL")
    sokol_shader_variant_with_reflection(shdfeatures-sapp.glsl ${slang} "lm"  "LIGHTING:MATERIAL")
    sokol_shader_variant_with_reflection(shdfeatures-sapp.glsl ${slang} "m"   "MATERIAL")
    sokol_shader_variant_with_reflection(shdfeatures-sapp.glsl ${slang} "l"   "LIGHTING")
    fips_dir(data)
    fipsutil_copy(ozz-skin-assets.yml)
    fips_deps(sokol fileutil ozzanim ozzutil cimgui)
fips_end_app()

if (NOT FIPS_ANDROID)
fips_ide_group(Samples)
fips_begin_app(noentry-sapp windowed)
    fips_files(noentry-sapp.c)
    sokol_shader(noentry-sapp.glsl ${slang})
    fips_deps(sokol-noentry)
fips_end_app()
endif()

if ((FIPS_WINDOWS OR FIPS_MACOS OR FIPS_LINUX) AND NOT FIPS_UWP)
fips_ide_group(Samples)
fips_begin_app(noentry-dll-sapp windowed)
    fips_files(noentry-dll-sapp.c)
    sokol_shader(noentry-dll-sapp.glsl ${slang})
    fips_deps(sokol-dll)
fips_end_app()
endif()

endif() # FIPS_UWP
